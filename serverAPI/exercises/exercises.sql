INSERT INTO exercise (title, instructions, testFileName) VALUES
('Ola, Mundo!', 
'Escreva um programa que imprime "Ola, Mundo!" na tela.\n\nResultado esperado:\nOla, Mundo!\n\nDica: Use std::cout e lembre-se do \\n no final.', 
'0_test.cpp'),
('Soma de Dois Números', 
'Leia dois números inteiros do usuario e imprima a soma deles.\n\nResultado esperado (exemplo):\nDigite dois números: 3 4\nSoma: 7\n\nDica: Use std::cin para entrada.', 
'1_test.cpp'),
('Multiplicaçao Simples', 
'Leia dois números inteiros e imprima o produto deles.\n\nResultado esperado (exemplo):\nDigite dois números: 5 6\nProduto: 30\n\nDica: Multiplicaçao e feita com o operador *.', 
'2_test.cpp'),
('Maior de Dois Números', 
'Leia dois números inteiros e imprima o maior deles.\n\nResultado esperado (exemplo):\nDigite dois números: 8 12\nMaior: 12\n\nDica: Use if/else para comparar.', 
'3_test.cpp'),
('Par ou Impar', 
'Leia um número inteiro e informe se ele e par ou impar.\n\nResultado esperado (exemplo):\nDigite um número: 7\nImpar\n\nDica: Use o operador % para resto da divisao.', 
'4_test.cpp'),
('Soma de Vetor', 
'Leia 5 números inteiros em um vetor e imprima a soma deles.\n\nResultado esperado (exemplo):\nDigite 5 números: 1 2 3 4 5\nSoma: 15\n\nDica: Use um loop for para ler e somar.', 
'5_test.cpp'),
('Media de Números', 
'Leia 4 números reais e imprima a media deles.\n\nResultado esperado (exemplo):\nDigite 4 números: 2.0 4.0 6.0 8.0\nMedia: 5.0\n\nDica: Media e soma dividido pela quantidade.', 
'6_test.cpp'),
('Funçao de Soma', 
'Implemente uma funçao que recebe dois inteiros e retorna a soma deles.\n\nResultado esperado:\nSoma(3, 4) = 7\n\nDica: Defina a funçao antes do main.', 
'7_test.cpp'),
('Funçao de Fatorial', 
'Implemente uma funçao que calcula o fatorial de um número inteiro.\n\nResultado esperado:\nFatorial(5) = 120\n\nDica: Use recursao ou loop.', 
'8_test.cpp'),
('Troca de Valores', 
'Implemente uma funçao que troca os valores de dois inteiros usando referências.\n\nResultado esperado:\nAntes: a=3, b=5\nDepois: a=5, b=3\n\nDica: Use parâmetros por referência (&).', 
'9_test.cpp'),
('Busca em Vetor', 
'Leia 10 números em um vetor e procure por um valor informado pelo usuario. Informe se encontrou ou nao.\n\nResultado esperado (exemplo):\nDigite 10 números: 1 2 3 4 5 6 7 8 9 10\nBuscar: 7\nEncontrado\n\nDica: Use um loop para buscar.', 
'10_test.cpp'),
('Media Ponderada', 
'Leia três notas e seus respectivos pesos, calcule e imprima a media ponderada.\n\nResultado esperado (exemplo):\nNotas: 7 8 9\nPesos: 2 3 5\nMedia ponderada: 8.3\n\nDica: Media ponderada = soma(nota*pesos)/soma(pesos).', 
'11_test.cpp'),
('Funçao Maximo', 
'Implemente uma funçao que retorna o maior de três números inteiros.\n\nResultado esperado:\nMaximo(3, 7, 5) = 7\n\nDica: Use if/else ou std::max.', 
'12_test.cpp'),
('Inversao de Vetor', 
'Leia 5 números em um vetor e imprima-os na ordem inversa.\n\nResultado esperado (exemplo):\nEntrada: 1 2 3 4 5\nSaida: 5 4 3 2 1\n\nDica: Use um loop reverso.', 
'13_test.cpp'),
('Contador de Vogais', 
'Leia uma string e conte quantas vogais ela possui.\n\nResultado esperado (exemplo):\nEntrada: "banana"\nVogais: 3\n\nDica: Use um loop e verifique cada caractere.', 
'14_test.cpp'),
('Funçao Recursiva de Fibonacci', 
'Implemente uma funçao recursiva que retorna o n-esimo termo da sequência de Fibonacci.\n\nResultado esperado:\nFibonacci(6) = 8\n\nDica: Fibonacci(n) = Fibonacci(n-1) + Fibonacci(n-2).', 
'15_test.cpp'),
('Soma de Matriz', 
'Leia duas matrizes 2x2 e imprima a matriz soma.\n\nResultado esperado (exemplo):\nMatriz 1: 1 2 3 4\nMatriz 2: 5 6 7 8\nSoma: 6 8 10 12\n\nDica: Use dois loops for aninhados.', 
'16_test.cpp'),
('Produto Escalar', 
'Leia dois vetores de 3 elementos e calcule o produto escalar.\n\nResultado esperado (exemplo):\nVetores: 1 2 3 e 4 5 6\nProduto escalar: 32\n\nDica: Produto escalar = a1*b1 + a2*b2 + a3*b3.', 
'17_test.cpp'),
('Funçao de Potência', 
'Implemente uma funçao que calcula a potência de um número inteiro (base^expoente).\n\nResultado esperado:\nPotencia(2, 3) = 8\n\nDica: Use loop ou recursao.', 
'18_test.cpp'),
('Parâmetro por Referência', 
'Implemente uma funçao que dobra o valor de um inteiro passado por referência.\n\nResultado esperado:\nAntes: 4\nDepois: 8\n\nDica: Use & no parâmetro.', 
'19_test.cpp'),
('Classe Pessoa', 
'Crie uma classe Pessoa com nome e idade. Implemente um metodo para imprimir os dados.\n\nResultado esperado:\nNome: Ana, Idade: 20\n\nDica: Use metodos públicos.', 
'20_test.cpp'),
('Classe Retângulo', 
'Crie uma classe Retângulo com base e altura. Implemente metodos para calcular area e perimetro.\n\nResultado esperado:\narea: 20, Perimetro: 18\n\nDica: Metodos podem retornar valores.', 
'21_test.cpp'),
('Classe Conta Bancaria', 
'Implemente uma classe ContaBancaria com saldo, metodos para depositar e sacar.\n\nResultado esperado:\nSaldo inicial: 100\nDepositar: 50\nSacar: 30\nSaldo final: 120\n\nDica: Controle o saldo para nao ficar negativo.', 
'22_test.cpp'),
('Classe Aluno', 
'Crie uma classe Aluno com nome e nota. Implemente um metodo para verificar se esta aprovado (nota >= 6).\n\nResultado esperado:\nAprovado\n\nDica: Use bool como retorno.', 
'23_test.cpp'),
('Classe Vetor Dinâmico', 
'Implemente uma classe Vetor que armazena inteiros dinamicamente (use new/delete).\n\nResultado esperado:\nVetor de tamanho 3: 1 2 3\n\nDica: Lembre-se do destrutor.', 
'24_test.cpp'),
('Classe Pilha', 
'Implemente uma classe Pilha de inteiros com metodos push, pop e top.\n\nResultado esperado:\nPush: 1, 2, 3\nTop: 3\nPop: 3\nTop: 2\n\nDica: Use vetor interno e controle o topo.', 
'25_test.cpp'),
('Classe Data', 
'Crie uma classe Data com dia, mês e ano. Implemente um metodo para imprimir no formato dd/mm/aaaa.\n\nResultado esperado:\nData: 05/04/2025\n\nDica: Use std::setw e std::setfill.', 
'26_test.cpp'),
('Classe Livro', 
'Implemente uma classe Livro com titulo, autor e ano. Implemente um metodo para exibir os dados.\n\nResultado esperado:\nTitulo: Dom Casmurro, Autor: Machado de Assis, Ano: 1899\n\nDica: Use metodos get/set.', 
'27_test.cpp'),
('Classe Conta Corrente com Limite', 
'Implemente uma classe ContaCorrente com saldo e limite. O saque nao pode ultrapassar o limite.\n\nResultado esperado:\nSaldo: 100, Limite: 50\nSaque: 120\nSaldo: -20\n\nDica: Verifique o saldo + limite antes de sacar.', 
'28_test.cpp'),
('Classe Agenda', 
'Crie uma classe Agenda que armazena ate 10 nomes. Implemente metodos para adicionar e listar nomes.\n\nResultado esperado:\nAdicionados: Ana, Joao\nLista: Ana, Joao\n\nDica: Use array de strings.', 
'29_test.cpp');


SELECT E.id, E.title, E.testFileName, UE.done FROM exercise as E left join user_exercise as UE on E.id = UE.exerciseId;
